name: Build & Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs: 
      version:
        description: The version of the build packages
        default: 0.0.1
        type: string

jobs:
  build: 
    name: Build libraries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Build .net standard package
        run: chmod +x ./build.sh && ./build.sh -t netstandard2.0 -v $VERSION
        env:
          VERSION: ${{ inputs.version }}
        
      - name: Build .net 8.0 package
        run: ./build.sh -t net8.0 -v $VERSION --aot
        env:
          VERSION: ${{ inputs.version }}
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./dist/*.nupkg
  
  test:
    needs: build
    name: test on ${{ matrix.os }} (${{ matrix.architecture }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        architecture: [x64] # add arm64 when such runner are available
        dotnet: ['8.x']
      fail-fast: false
    env: 
      RUN_TIME: "${{ fromJson('{ \"ubuntu-latest\": \"linux-x64\", \"windows-latest\": \"win-x64\", \"macos-13\": \"osx-x64\" }')[matrix.os] }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download nuget packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./dist
          
      - name: Add local nuget feed
        shell: bash
        run: |
          cat >./NuGet.config <<EOL
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
             <add key="LocalPackages" value="./dist" />
            </packageSources>
            <activePackageSource>
             <!-- this tells that all of them are active -->
             <add key="All" value="(Aggregate source)" />
            </activePackageSource>
          </configuration>
          EOL

      - name: Install deps on linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: sudo apt update && sudo apt install clang zlib1g-dev
      
      # Setup .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '${{ matrix.dotnet }}'  # Adjust the version to the one required by Hardware.Info project
      
      # Display installed .NET SDKs
      - name: Display .NET SDK version
        run: dotnet --info

      # Run with jit
      - name: Run tests with jit
        shell: bash
        run: |
          dotnet run \
            --project Hardware.Info.Test/Hardware.Info.Test.csproj \
            --configuration Release \
            -r "$RUN_TIME" \
            --verbosity quiet \
            -p WarningLevel=0 \
            -p PublishAot=false \
            -p PackageSource=nuget \
            -- \
            --enable-test-mode \
            --expected-compiler jit \
            --expected-arch ${{ matrix.architecture }} \
            --no-readline | tee ./output.jit
        
      # Run with aot
      - name: Compile ahead-of-time
        shell: bash
        run: |
          dotnet restore \
            Hardware.Info.Test/Hardware.Info.Test.csproj \
            --configuration Release \
            -r "$RUN_TIME" \
            -p PublishAot=true \
            -p PackageSource=nuget \
            --verbosity quiet \
            -p:TargetFrameworks=net8.0
          
          dotnet publish \
            Hardware.Info.Test/Hardware.Info.Test.csproj \
            --no-restore \
            --configuration Release \
            -r "$RUN_TIME" \
            -p PublishAot=true \
            -p PackageSource=nuget \
            --verbosity quiet \
            -p:TargetFrameworks=net8.0

      - name: Run tests with aot
        shell: bash
        run: |
          ./Hardware.Info.Test/bin/Release/net8.0/$RUN_TIME/publish/Hardware.Info.Test \
            --enable-test-mode \
            --expected-compiler aot \
            --expected-arch ${{ matrix.architecture }} \
            --no-readline | tee ./output.aot
          
      - name: Verify that output is identical
        if: ${{ false }}
        shell: bash
        run: diff ./output.jit ./output.aot